1. You are tasked with setting up a CI/CD pipeline in Jenkins to perform rolling deployments of a microservice to a Kubernetes cluster. The microservice is built as a Docker container. The pipeline should ensure zero downtime during deployments, perform basic health checks after the deployment, and roll back automatically if the deployment fails. How would you design this pipeline?"

    1. get the code from git - webhook
    2. do a static code analysis
    3. check for vulanerability in application dependencies/library,packages
    4. scan the file system using trivy
    5. build the image
    6. scan the image
    7. rolling update
    8. i will configure readiness prob and liveness prob in the kubernetes yaml
    9. deploy to kubernetes..if deplpyment..rollout will rollout the previous version
    10. post action : kubectl rollout undo


2. You have a Jenkins pipeline set up for a project, and the pipeline works fine when manually triggered. However, when trying to trigger the pipeline automatically via a Git webhook, the build fails with an error message indicating that the Jenkins server is unable to access the repository. What steps would you take to troubleshoot and resolve the issue?

    1. Verify the GitHub token in Jenkins credentials whether it is expired or not.
    2. Ensure the webhook is configured with the correct Jenkins URL and events (such as push or pull request).

3. Multiplebranch pipeline
    1. Multiplebranch pipeline in jenkins is used handle, multiple branches in the git repo, if u configure a multiplebranch piepeline,jenkins will automatically create a pipeline for each branch..and trigger based on the based on the changes
    2. Jenkins automatically detects all branches and creates a pipeline for each one.

4. Handling Failures in a Jenkins Pipeline
You have a Jenkins pipeline that includes several stages like Build, Test, and Deploy. Occasionally, the Test stage fails due to intermittent issues, but you want the pipeline to continue the build process after a failure in the Test stage.

Question: How would you modify the pipeline to ensure that the failure in the Test stage doesnâ€™t halt the entire pipeline, but you still want to track and report the failure?
    * catchError is the most commonly used step for this scenario as it allows you to handle failures without halting the pipeline.
    * The try-catch block provides a more manual method for catching errors and marking the build accordingly.

It will catch the error in the stage and continues the pipeline.

5. Handling Parallel Stages in a Jenkins Pipeline
        You need to optimize your Jenkins pipeline for faster execution by running multiple tasks in parallel. For example, you want to run unit tests, linting,         and security scans concurrently after the build stage.

    Question: How would you modify a Jenkins pipeline to execute the Test, Lint, and Security Scan stages in parallel, and ensure the pipeline waits for all of them to complete before moving to the next stage?

    Answer : Parallel block, this will run the jobs parallely.
        stage('test','scan'){
        parallel {
        stage('test'){
        }
        stage('scan'){
        }
    }
    }

    * The parallel block allows you to execute multiple stages concurrently. In this case, the test, scan,stages are executed in         parallel  after the Build     stage.
    Each of these stages will run at the same time, speeding up the pipeline.
    * the pipeline will wait for all the parallel stages to complete before moving on to the next stage
    * if any of the parallel stages fail, Jenkins will consider the entire parallel block as failed. If you want to allow one of the parallel tasks to fail without     failing the entire pipeline, you can use the catchError

6. You are tasked with setting up a Jenkins pipeline for multiple projects that need similar steps, but with dynamic values (e.g., different configurations or project names). The configuration of each project may change frequently.

    Question: How would you dynamically create Jenkins jobs for each project using a single Jenkins pipeline, ensuring that each job has project-specific         
     configurations (e.g., repository URL, environment variables)?

    parmaterized pipeline

    The pipeline uses parameters such as PROJECT_NAME, REPO_URL, and ENVIRONMENT to dynamically customize the pipeline steps.

7.  Handling Dependencies Between Jobs in Jenkins
        You are working with multiple Jenkins jobs, and there is a dependency between them. For example, the deployment job should only run if the build and test jobs succeed.
        
        Question: How would you set up job dependencies between Jenkins pipelines so that a Deploy job is triggered only when the Build and Test jobs have successfully complete
        Answer : * Conditionally Triggering Stages: Run a stage only if certain conditions are met (e.g., only deploy to production if the branch is main).
                 * Skipping Stages: Skip a stage if a condition is met (e.g., skip the Test stage if it's a merge commit).
                * Handling Results: Conditionally run a stage depending on the result of a previous stage (e.g., only deploy if the tests pass).

8. You have a Jenkins pipeline that takes too long to complete due to repeated tasks in multiple stages. The pipeline needs to be optimized to reduce build time, especially when there are no changes to the code or configurations.
    
    Question: What strategies can you use to optimize the pipeline and reduce build times in Jenkins? How would you implement caching or skipping unnecessary tasks to speed up the process

    Answer : * store downloaded depdendencies..with this we can avoid downloading everytime,if we r using docker..caching the docker layer speed up the process
            * use when condition to skip some stages..if no code changes happend..we can skip build and testing
            * we can run our pipeline parallely..testing, scan, depedency check

9. The changeset condition ensures that the Build and Test stages only run when there are changes to some files.
